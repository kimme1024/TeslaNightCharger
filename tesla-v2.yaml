###############################################################################
# Disclaimer:
#
# Even though this automation has been created with care, the author cannot be
# responsible for any damages caused by this automation.  Use at your own risk.
#
###############################################################################
# Objective:
# - To charge Tesla from excess solar which would have otherwise be exported to grid.
#
# Note:
# - Credit goes to Alphaemef for the solar charger Blueprint.
#   https://gist.github.com/Alphaemef/70f203cc6a5acb75d987ae88d9be2edf
#
# History:
# 20/6/2023 Inspiration from Alphaemef's Tesla Solar Charger Blueprint 30/4/2023.
###############################################################################

blueprint:

  name: Tesla solar charger automation
  description: Smart charger to charge Tesla car using surplus solar electricity.
  domain: automation

###############################################################################
# Blueprint inputs
###############################################################################
  input:
    car_location_tracker:
      name: Tesla location tracker
      description: The entity that provides the location of car. Important that home location is defined in Home Assistant.
      default: device_tracker.location_tracker
      selector:
        entity:
          domain: device_tracker

    car_button_wake_up:
      name: Tesla button wake up
      description: Button to wake up car.
      default: button.wake_up
      selector:
        entity:
          domain: button

    car_binary_sensor_charger_pluggedin:
      name: Tesla binary sensor charger
      description: Sensor to check if car is plugged in.
      default: binary_sensor.charger
      selector:
        entity:
          domain: binary_sensor

    car_switch_charger:
      name: Tesla switch charger
      description: Switch to turn charger on or off.
      default: switch.charger
      selector:
        entity:
          domain: switch

    car_binary_sensor_charging:
      name: Tesla binary sensor charging
      description: Sensor to check if car is charging.
      default: binary_sensor.charging
      selector:
        entity:
          domain: binary_sensor

    car_number_charging_amps:
      name: Tesla charging amps
      description: Entity to control current in Ampere used to charge the car battery. This is the main parameter used to adjust electricity consumption.
      default: number.charging_amps
      selector:
        entity:
          domain: number

    car_number_charge_limit:
      name: Tesla charge limit
      description: Entity to control car battery charge limit in percentage (100% = fully charged).
      default: number.charge_limit
      selector:
        entity:
          domain: number

    car_sensor_battery:
      name: Tesla sensor battery
      description: Sensor that reports current battery charge level.
      default: sensor.battery
      selector:
        entity:
          domain: sensor

    car_button_forceupdate_ha:
      name: Tesla button force update Home Assistant
      description: Button to force update sensors in Home Assistant with values from car.
      default: button.force_data_update
      selector:
        entity:
          domain: button

    sensor_grid_power_net:
      name: Grid power net
      description: Sensor that express negative power in Watts when exporting to grid and positive power when consuming from grid. This sensor is the feedback loop for adjusting power consumption.
      default: sensor.grid_power_net
      selector:
        entity:
          domain: sensor

    sensor_homebattery_power_net:
      name: Home battery power net
      description: Sensor reporting net battery power in Watts. This works even if no battery is connected, in which case choose any entity with a non-number state.
      default: sensor.shift_state
      selector:
        entity:
          domain: sensor

    sensor_homebattery_level:
      name: Home battery charge level
      description: Sensor reporting home battery charge level in percentage. If there is no homebattery_level entity, choose any entity with a non-number state.
      default: sensor.shift_state
      selector:
        entity:
          domain: sensor

    # https://github.com/home-assistant/frontend/issues/12281
    #toggle_charge_from_grid:
    #  name: Charge from Grid Toggle
    #  description: Turn on to charge from grid at constant current.
    #  default: false
    #  selector:
    #    boolean: {}

    toggle_charge_from_grid:
      name: Charge from grid toggle
      description: Toggle on to charge from grid at specified current (Settings > Devices & Services > Helpers > Create helper > Toggle). The default is to charge from solar only.
      #default: input_boolean.telsa_model3_charge_from_grid
      selector:
        entity:
          domain: input_boolean

    toggle_stop_charger:
      name: Stop charger toggle
      description: Toggle on to stop charger script (Settings > Devices & Services > Helpers > Create helper > Toggle). Delayed by "Wait grid power net update" value.
      #default: input_boolean.tesla_model3_stop_charging
      selector:
        entity:
          domain: input_boolean

    #stop_charger_button:
    #  name: Stop Charger Button
    #  description: Create helper button to stop this script when pressed (Settings > Devices & Services > Helpers > Create helper > Button).
    #  selector:
    #    entity:
    #      domain: input_button

    charger_voltage:
      name: Charger voltage
      description: Specify charger voltage in Volt. In Australia, single phase is 230V, and three phase is 400V due to 120 degree phase angle between phases.
      default: 230
      selector:
        number:
          min: 100
          max: 450
          unit_of_measurement: volt
          mode: box

    charger_max_current:
      name: Charger maximum current
      description: Specify charger maximum current in Ampere.
      default: 15
      selector:
        number:
          min: 5
          max: 32
          unit_of_measurement: amp
          mode: box

    wait_grid_power_net_update:
      name: Wait grid power net update
      description: Specify in seconds how often to check the "sensor_grid_power_net". The waiting period should be longer than the sensor update interval.
      default: 60
      selector:
        number:
          min: 1
          max: 600
          unit_of_measurement: second
          mode: box

    sunrise_offset_start_trigger:
      name: Sunrise offset start trigger
      description: Specify time to start charging relative to sunrise, eg. set "+00:30:00" without quotes to start 30 minutes after sunrise.
      default: "+00:30:00"

    sunset_offset_end_trigger:
      name: Sunset offset end trigger
      description: Specify time to stop charging relative to sunset, eg. set "-00:30:00" without quotes to end 30 minutes before sunset.
      default: "-00:30:00"

###############################################################################
# Global variables
# https://community.home-assistant.io/t/why-the-heck-dont-we-have-global-variables/219671/86
# https://github.com/rogro82/hass-variables
###############################################################################
variables:

  #####################################
  # Constants
  #####################################
  # Tesla UMC charger initial minimum charging current is 5A, after that it can vary between 0A and 15A.
  initial_charge_current: 6
  #max_allowable_current_delta: 6

  # Time to wait in seconds for car to wake up.
  wait_car_wakeup: 40

  # Time to wait in seconds to turn charger on or off.
  # To switch on charger from 2V to 230V and then ram up current, it took 16 seconds for initial_charge_current 15A.
  #wait_charger_on: 16
  # To switch on charger from 2V to 230V and then ram up current, it took 11 seconds for initial_charge_current 6A.
  wait_charger_on: 11
  wait_charger_off: 5

  # Time to wait in seconds for current to change after sending command.
  #wait_current_change: "00:00:0.3"
  wait_current_change: 0.3

  # Time to wait in seconds for command to execute after sending command.
  wait_command_execute: 5
  #wait_command_execute_str: "00:00:{{ wait_command_execute }}"

  # "Skew_default" defines the right / left skew of the import/export curve. I.e a skew of 0.0 will increase current draw
  # as soon as power to grid turns negative, and reduces current when power goes higher than 230W.
  # i.e it will aim at power draw in the range [0-230W[. A skew of -1 will aim at a power from grid of [-230;0[
  # Should be kept between -1 and 0.
  skew_default: -0.3

  #####################################
  # Inputs
  #####################################
  charge_from_grid: !input toggle_charge_from_grid
  #stop_charger_button_press: !input stop_charger_button
  stop_charger: !input toggle_stop_charger
  car_charger_voltage: !input charger_voltage
  car_charger_max_current: !input charger_max_current

  # Power = Voltage * Current
  # The power step in watts to increase or decrease with 1A current change.
  one_amp_watt_step: "{{ car_charger_voltage * 1 }}"

  # This worked ok.
  #tesla_model3_charge_level: "sensor.battery"
  #tesla_model3_charge_level: !input car_sensor_battery
  car_chargelimit_ent: !input car_number_charge_limit
  car_chargelimit_last: '{{ expand(car_chargelimit_ent)[0].last_changed | as_timestamp }}'
  car_chargelimit_val: '{{ expand(car_chargelimit_ent)[0].state }}'
  car_batterylevel_ent: !input car_sensor_battery
  car_batterylevel_last: '{{ expand(car_batterylevel_ent)[0].last_changed | as_timestamp }}'
  car_batterylevel_val: '{{ expand(car_batterylevel_ent)[0].state }}'

  car_charging_amps: !input car_number_charging_amps

###############################################################################
# Triggers
# Note:
# - Tesla triggers do not update often due to infrequent polling.
###############################################################################
trigger:
  #- platform: numeric_state
  #  entity_id: !input sensor_grid_power_net
  #  below: 300

  #- platform: numeric_state
  #  entity_id: !input sensor_grid_power_net
  #  below: 0

  # Trigger action if just plugged in.
  - platform: state
    entity_id:
      - !input car_binary_sensor_charger_pluggedin
    to: "on"

  # Disabled this trigger to allow off-peak night time charging.
  # Trigger action if already charging.
  #- platform: state
  #  entity_id: !input car_binary_sensor_charging
  #  to: "on"

  # Trigger action after sunrise offset.
  - platform: sun
    event: sunrise
    offset: !input sunrise_offset_start_trigger

condition:

  - condition: state
    entity_id: !input car_location_tracker
    state: home

  - condition: state
    entity_id: !input car_binary_sensor_charger_pluggedin
    state: "on"

###############################################################################
# Action
###############################################################################
action:

  # Wake up Tesla.
  - service: button.press
    data: {}
    target:
      entity_id: !input car_button_wake_up
  - delay: "{{ wait_car_wakeup }}"

  # Get the latest data from Tesla to update HA.
  - service: button.press
    data: {}
    target:
      entity_id: !input car_button_forceupdate_ha
  - delay: "{{ wait_command_execute }}"

  # Save current Tesla parameters for later restore.
  - service: scene.create
    data:
      scene_id: tesla_solar_charger_script_scene
      snapshot_entities:
        - !input car_number_charge_limit
        - !input car_number_charging_amps
  - delay: "{{ wait_command_execute }}"

  # Should not set own charge limit here. Should honour existing charge limit set by app or car.
  #- service: number.set_value
  #  data:
  #    value: "{{ states('input_number.tesla_model3_max_charge_limit') | int }}"
  #  target:
  #    entity_id: !input car_number_charge_limit

  #####################################
  # Main while loop
  #####################################
  - repeat:

      # Only start charging when following conditions are met, otherwise exit script.
      while:
        - condition: and
          conditions:

            # Continue if stop button has not been recently pressed.
            # https://community.home-assistant.io/t/repeat-until-input-button-is-pressed/429300
            # input_button is a state with timestamp of button-press event.
            # https://community.home-assistant.io/t/strptime-vs-as-datetime/381500/6
            # Got follow error if button was newly created and was never pressed before. Work-around is just to press button once or set default(0, true).
            # Error: In 'template' condition: TypeError: unsupported operand type(s) for -: 'datetime.datetime' and 'NoneType'
            #- condition: template
            #  value_template: "{{ now() - (states(stop_charger_button_press) | default(0, true) | as_datetime) > timedelta(seconds=(wait_command_execute * 3 + loop_wait_time)) }}"

            # Continue if stop button is toggled off.
            - condition: template
              value_template: "{{ is_state(stop_charger, 'off') }}"

            # Continue if charger is plugged in.
            - condition: state
              entity_id: !input car_binary_sensor_charger_pluggedin
              state: "on"

            # Continue if battery is more than 1% below charge limit.
            # https://community.home-assistant.io/t/configuring-variables-into-templates-in-a-blueprint/323811/2
            # OK to charge 1% less because Tesla can stop charging at 1% less by itself.
            #- condition: template
            #  value_template: "{{ (expand(car_batterylevel_ent)[0].state | int + 1) < (expand(car_chargelimit_ent)[0].state | int) }}"

            # Continue if battery is below charge limit.
            # https://community.home-assistant.io/t/configuring-variables-into-templates-in-a-blueprint/323811/2
            - condition: template
              value_template: "{{ (expand(car_batterylevel_ent)[0].state | int) < (expand(car_chargelimit_ent)[0].state | int) }}"

            - condition: or
              conditions:

                # Continue if charge from grid at constant current.
                #- condition: state
                #  entity_id: input_boolean.telsa_model3_charge_from_grid
                #  state: "on"
                - condition: template
                  value_template: "{{ is_state(charge_from_grid, 'on') }}"

                # Continue if within daylight hours.
                - condition: sun
                  after: sunrise
                  before: sunset
                  before_offset: !input sunset_offset_end_trigger

      sequence:

        - variables:
            # For Enphase, grid_power_net is an integer in watts. Positive value means importing power from grid. Negative value means exporting power to grid.
            grid_power_net: !input sensor_grid_power_net

            homebattery_power_net: !input sensor_homebattery_power_net
            homebattery_level: !input sensor_homebattery_level
            skew: >-
              {% if skew_default <= -1 %}
                {{ skew_default }}
              {% elif states(homebattery_level) | float(90) < 90 %}
                {{ -1.01 }}  
              {% else %}
                {{ skew_default }} 
              {% endif %}

        - variables:

            # Net power from all sources (default 0 set by float(0) if cannot convert to float).
            all_power_net: >-
              {% if states(homebattery_power_net) | float(0) > 0 %}
                {{ states(grid_power_net) | float(0) + states(homebattery_power_net) | float(0) + (1 + skew_default) * one_amp_watt_step }}  
              {% else %}
                {{ states(grid_power_net) | float(0) }} 
              {% endif %}

            # This can be greater than car_charger_max_current.
            # +ve => importing amp from grid, -ve => exporting amp to grid
            all_current_net: "{{ (all_power_net / one_amp_watt_step) | float }}"

            # Charge current for this sequence run, including sanity check to ensure within limits.
            charge_current: >-
              {% if states(car_charging_amps) | int < 0 %}
                {{ 0 }}
              {% elif states(car_charging_amps) | int > car_charger_max_current %}
                {{ car_charger_max_current }}
              {% else %}
                {{ states(car_charging_amps) | int }}
              {% endif %}

            # If importing from grid, will try to decrease charge current by same consumption or 0.
            # If exporting to grid, will try to increase charge current by same production or max charger current.
            #propose_charge_current: >-
            new_charge_current: >-
              {% if all_current_net > 0 %}
                {{ [0, charge_current - all_current_net] | max | round(0) }}
              {% else %}
                {{ [car_charger_max_current, charge_current - all_current_net] | min | round(0) }}
              {% endif %}

            # No longer required since step size is now 1A, except when switching on charger when current increment is managed by Tesla car.            
            # Will try to increase or decrease current using step size max_allowable_current_delta only or smaller.
            #new_charge_current: >-
            #  {% if (charge_current - propose_charge_current) | abs > max_allowable_current_delta %}
            #    {% if charge_current > propose_charge_current %}
            #      {{ charge_current - max_allowable_current_delta }}
            #    {% else %}
            #      {{ charge_current + max_allowable_current_delta }}
            #    {% endif %}
            #  {% else %}
            #    {{ propose_charge_current }}              
            #  {% endif %}

        - choose:

          # First time run, turn on charger if not turned on already.
          - conditions:
              - condition: template
                value_template: "{{ repeat.index == 1 }}"
            sequence:

              - choose:
                - conditions:
                    - condition: state
                      entity_id: !input car_binary_sensor_charging
                      state: "off"
                  sequence:
                    # Only set initial current if charging from solar, otherwise charge from grid using current set by user enforcing current limits.
                    - if:
                        - condition: template
                          value_template: "{{ is_state(charge_from_grid, 'off') }}"
                      then:
                        - service: number.set_value
                          data:
                            value: "{{ initial_charge_current }}"
                          target:
                            entity_id: !input car_number_charging_amps
                      else:
                        - service: number.set_value
                          data:
                            value: "{{ charge_current }}"
                          target:
                            entity_id: !input car_number_charging_amps
                    - delay: "{{ wait_command_execute }}"

                    # Turn on charger. Rate of current increase is handled by Tesla car.
                    - service: switch.turn_on
                      data: {}
                      target:
                        entity_id: !input car_switch_charger
                    - delay: "{{ wait_charger_on }}"
          
          # Toggled to charge from grid at current specified in app.
          - conditions:
              - condition: template
                value_template: "{{ is_state(charge_from_grid, 'on') }}"
            sequence:
              - delay: "00:00:00"

          # Exit script if charger is turned off, ie. not charging.
          - conditions:
              - condition: state
                entity_id: !input car_binary_sensor_charging
                state: "off"
            sequence:
              # Restore previous settings.
              - service: scene.turn_on
                target:
                  entity_id: scene.tesla_solar_charger_script_scene
              - delay: "{{ wait_command_execute }}"

              # Get the latest data from Tesla to update HA before exiting script.
              - service: button.press
                data: {}
                target:
                  entity_id: !input car_button_forceupdate_ha
              - delay: "{{ wait_command_execute }}"

              - stop: "Exiting script due to charger turned off manually or automatically by car when charge limit reached."
                # https://www.home-assistant.io/docs/scripts/#stopping-a-script-sequence
                # Cannot get response_variable to work. Needs to be key/value pair?
                #response_variable: "stop_charging_reason"

          # all_power_net < -69W, ie. need to increase charger current.
          - conditions:
              - condition: template
                value_template: "{{ all_power_net < (0 + skew) * one_amp_watt_step }}"
            sequence:
              # Gradually increase current with 1A step.
              - repeat:
                  while: "{{ (charge_current + repeat.index) <= new_charge_current }}"
                  sequence:
                    - service: number.set_value
                      data_template:
                        value: "{{ charge_current + repeat.index }}"
                      target:
                        entity_id: !input car_number_charging_amps
                    - delay: "{{ wait_current_change }}"

          # all_power_net >= 161W, ie. need to decrease charger current.
          - conditions:
              - condition: template
                value_template: "{{ all_power_net >= (1 + skew) * one_amp_watt_step }}"
            sequence:
              # Gradually decrease current with 1A step.
              - repeat:
                  while: "{{ (charge_current - repeat.index) >= new_charge_current }}"
                  sequence:
                    - service: number.set_value
                      data_template:
                        value: "{{ charge_current - repeat.index }}"
                      target:
                        entity_id: !input car_number_charging_amps
                    - delay: "{{ wait_current_change }}"

          # 161 > all_power_net >= -69W, ie. do nothing.
          - conditions:
              - condition: template
                value_template: "{{ (1 + skew) * one_amp_watt_step > all_power_net >= (0 + skew) * one_amp_watt_step }}"
            sequence:
              - delay: "00:00:00"


        # Get the latest data from Tesla to update HA.
        - service: button.press
          data: {}
          target:
            entity_id: !input car_button_forceupdate_ha
        - delay: "{{ wait_command_execute }}"

        # Sleep to ensure HA is updated before the next read.
        - delay:
            hours: 0
            minutes: 0
            seconds: !input wait_grid_power_net_update
            milliseconds: 0

  #####################################
  # Exit script
  #####################################
  - if:
      - condition: state
        entity_id: !input car_binary_sensor_charging
        state: "on"
    then:
      # Gradually decrease to 0A with 1A step, otherwise Tesla car can decrease current from 15A -> 7A -> 0A in 1 second.
      - variables:
          charge_current: "{{ states(car_charging_amps) | int }}"
      - repeat:
          while: "{{ (charge_current - repeat.index) >= 0 }}"
          sequence:
            - service: number.set_value
              data_template:
                value: "{{ charge_current - repeat.index }}"
              target:
                entity_id: !input car_number_charging_amps
            - delay: "{{ wait_current_change }}"
      - delay: "{{ wait_command_execute }}"

      # Turn off charger.
      - service: switch.turn_off
        data: {}
        target:
          entity_id: !input car_switch_charger
      - delay: "{{ wait_charger_off }}"

  # Restore previous settings.
  - service: scene.turn_on
    target:
      entity_id: scene.tesla_solar_charger_script_scene
  - delay: "{{ wait_command_execute }}"

  # Get the latest data from Tesla to update HA before exiting script.
  - service: button.press
    data: {}
    target:
      entity_id: !input car_button_forceupdate_ha
  - delay: "{{ wait_command_execute }}"

mode: single
